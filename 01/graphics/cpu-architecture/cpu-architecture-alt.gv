digraph graphname {
    graph [rankdir="LR" concentrate="true" overlap="scale"]; //splines="ortho"
    node [shape=record];


    // f0 always refer to the part of block/component/blob that has its name on it
    // except for muxes, which have their names floating around them as an external label
    "PC" [height="1.5" label="<f0> PC | <in> PC_in | <out> PC_out "];

    "Add1" [xlabel="adder" label="<in1> in | <in2> in | <out> +"]; //in1 should get rendered as the top one
    "constant_1" [label="1" shape="text"];


    "Add2" [xlabel="adder" label="<in1> in | <in2> in | <out> +"];
    "Concat" [shape="circle"];
    "Sign Extend" [ shape="circle" label="sign\n extend"];

    "Control Unit" [label="<f0> Control Unit | <alusource> ALU source | <regwrite> register write | <regdest> register destination | <inst> Instruction | <memtoreg> Memory to register | <memw> Memory write | <jump> jump"];
    "Branch Controller" [label="<f0> Branch Controller | <opcode> opcode | <negative> negative | <zero> zero  |  <branch> branch | <zerooverride> zero override enable | <value> value "];

    "ALU" [label="<f0> ALU | <x> X | <y> Y | <r> R"];

    "Registers" [label="<f0> Registers | <readreg1> Read register 1 | <readreg2> Read register 2 | <wreg> Write register | <wdata> Write data | <regwrite> register write | <readdata1> Read data 1 | <readdata2> Read data 2 "];

    "Instruction Memory" [label=" <f0>Instruction Memory | <read address> read address | <inst> Instruction [31-0]"];
    "Data Memory" [label=" <f0> Data Memory |  <address> address | <wdata> write data | <memwrite> Memory Write  | <rdata> read data "];

    // MUX layout:
    // 1 on top, 0 on bottom
    // control signal is middle-left
    // output is middle-right
    "Register Destination MUX" [shape="Mrecord" label="<1> 1 |  <control> control | <out> out  | <0> 0" xlabel="MUX_reg_dest"];
    "ALU Source MUX" [shape="Mrecord" label="<1> 1 |  <control> control | <out> out  | <0> 0" xlabel="MUX_alu_src"];
    "Branch MUX" [shape="Mrecord" label="<1> 1 |  <control> control | <out> out  | <0> 0" xlabel="MUX_branch"];
    "Jump MUX" [shape="Mrecord" label="<1> 1 |  <control> control | <out> out  | <0> 0" xlabel="MUX_jmp"];
    "Memory to Register MUX" [shape="Mrecord" label="<1> 1 |  <control> control | <out> out  | <0> 0" xlabel="MUX_mem_to_reg"];
    "Zero Override MUX" [shape="Mrecord" label="<1> 1 |  <control> control | <out> out  | <0> 0" xlabel="MUX_zero_override"]

    // was this removed from the design?
//    "Shift Swap MUX" [shape="Mrecord" label="<1> 1 | { <control> | <out> }| <0> 0" xlabel="MUX_shift_swap"];

    // signals! erm I mean EDGES
    PC:out -> "Instruction Memory":"read address";
    PC:out -> "Add1":in1;
    // need to hack the '1' in on the first adder somehow
    constant_1 -> "Add1":in2;

    Add1:out -> Concat [label="PC[31-26]"];
    Add1:out -> Add2:in1;
    Add1:out -> "Branch MUX":0;

    Add2:out -> "Branch MUX":1;

    "Branch MUX":out -> "Jump MUX":0;
    "Jump MUX":out -> PC:in;
    "Register Destination MUX":out -> "Registers":"wreg";
    "ALU Source MUX":out -> "Zero Override MUX":0;
    "Zero Override MUX":out -> "ALU":y;
    "Memory to Register MUX":out -> "Registers":wdata;


    "Instruction Memory":inst -> "Registers":"readreg2" [label="Inst[25-21]"];
    "Instruction Memory":inst -> "Registers":"readreg1" [label="Inst[20-16]"];
    "Instruction Memory":inst -> "Register Destination MUX":0 [label="Inst[20-16]"];
    "Instruction Memory":inst -> "Register Destination MUX":1 [label="Inst[15-11]"];
    "Instruction Memory":inst -> "Concat" [label="Inst[25-0]"];
    "Instruction Memory":inst -> "Control Unit":inst;
    "Instruction Memory":inst -> "Sign Extend" [label="16" arrowhead="rcrowlvee"];
    "Instruction Memory":inst -> "Branch Controller":opcode [label="Inst[31-26]"];

    "Sign Extend" -> SignExtendHolder [label="32" arrowhead="rcrowlvee"];
    // invisible node trick!
    "SignExtendHolder" [shape="circle" width="0.01" height="0.01" label=""];
    SignExtendHolder -> Add2:in2;
    SignExtendHolder -> "ALU Source MUX":1;

    "Registers":"readdata1" -> "ALU":x;
    "Registers":"readdata2" -> "ALU Source MUX":0;
    "Registers":"readdata2" -> "Data Memory":"wdata";

    "ALU":r -> "Data Memory":"address";
    "ALU":r -> "Memory to Register MUX":0;
    "ALU":r -> "Branch Controller":"zero";
    "ALU":r -> "Branch Controller":"negative";

    "Data Memory":"rdata" -> "Memory to Register MUX":1;

    "Branch Controller":"zerooverride" -> "Zero Override MUX":control;
    "Branch Controller":"value" -> "Zero Override MUX":1;
    "Branch Controller":"branch" -> "Branch MUX":control;

    "Control Unit":alusource -> "ALU Source MUX":control;
    "Control Unit":regwrite -> "Registers":regwrite;
    "Control Unit":regdest -> "Register Destination MUX":control;
    "Control Unit":jump -> "Jump MUX":control;
    "Control Unit":memw -> "Data Memory":memwrite;
    "Control Unit":memtoreg -> "Memory to Register MUX":control;

    "Concat" -> "Jump MUX":1 [label="Jump Address[31-0]"];
 }